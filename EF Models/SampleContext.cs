// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EF_Models
{
    public partial class SampleContext : DbContext
    {
        public SampleContext()
        {
        }

        public SampleContext(DbContextOptions<SampleContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<ActivityExecutionStatus> ActivityExecutionStatus { get; set; }
        public virtual DbSet<ActivityExecutionStatusEvent> ActivityExecutionStatusEvent { get; set; }
        public virtual DbSet<ActivityInstance> ActivityInstance { get; set; }
        public virtual DbSet<AddedActivity> AddedActivity { get; set; }
        public virtual DbSet<CompletedScope> CompletedScope { get; set; }
        public virtual DbSet<DefaultTrackingProfile> DefaultTrackingProfile { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Activity>(entity =>
            {
                entity.HasKey(e => new { e.WorkflowTypeId, e.QualifiedName })
                    .HasName("pk_WorkflowTypeId_QualifiedName");

                entity.HasIndex(e => e.QualifiedName)
                    .HasName("idx_Activity_QualifiedName");

                entity.HasIndex(e => e.WorkflowTypeId)
                    .HasName("idx_Activity_WorkflowTypeId");

                entity.Property(e => e.QualifiedName).HasMaxLength(128);

                entity.Property(e => e.ParentQualifiedName).HasMaxLength(128);
            });

            modelBuilder.Entity<ActivityExecutionStatus>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Description).HasMaxLength(128);
            });

            modelBuilder.Entity<ActivityExecutionStatusEvent>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.WorkflowInstanceInternalId)
                    .HasName("idx_ActivityExecutionStatusEvent_WorkflowInstanceInternalId")
                    .IsClustered();

                entity.Property(e => e.ActivityExecutionStatusEventId).ValueGeneratedOnAdd();

                entity.Property(e => e.DbEventDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.EventDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityInstance>(entity =>
            {
                entity.HasKey(e => e.ActivityInstanceId)
                    .HasName("pk_ActivityInstance_ActivityInstanceId")
                    .IsClustered(false);

                entity.HasIndex(e => e.WorkflowInstanceInternalId)
                    .HasName("idx_ActivityInstance_WorkflowInstanceInternalId")
                    .IsClustered();

                entity.HasIndex(e => new { e.WorkflowInstanceInternalId, e.QualifiedName, e.ContextGuid, e.ParentContextGuid })
                    .HasName("idx_ActivityInstance_WorkflowInstanceInternalId_QualifiedName_ContextGuid_ParentContextGuid");

                entity.Property(e => e.QualifiedName)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AddedActivity>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.WorkflowInstanceEventId)
                    .HasName("idx_AddedActivity_WorkflowInstanceEventId");

                entity.HasIndex(e => e.WorkflowInstanceInternalId)
                    .HasName("idx_AddedActivity_WorkflowInstanceInternalId")
                    .IsClustered();

                entity.Property(e => e.AddedActivityAction).HasMaxLength(2000);

                entity.Property(e => e.ParentQualifiedName).HasMaxLength(128);

                entity.Property(e => e.QualifiedName)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<CompletedScope>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.CompletedScopeId)
                    .HasName("IX_CompletedScope");

                entity.HasIndex(e => e.UidInstanceId)
                    .HasName("IX_CompletedScope_InstanceID");

                entity.Property(e => e.CompletedScopeId).HasColumnName("completedScopeID");

                entity.Property(e => e.Modified)
                    .HasColumnName("modified")
                    .HasColumnType("datetime");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("state")
                    .HasColumnType("image");

                entity.Property(e => e.UidInstanceId).HasColumnName("uidInstanceID");
            });

            modelBuilder.Entity<DefaultTrackingProfile>(entity =>
            {
                entity.HasKey(e => e.Version)
                    .HasName("pk_DefaultTrackingProfile_Version");

                entity.Property(e => e.Version)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InsertDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.TrackingProfileXml)
                    .IsRequired()
                    .HasColumnType("ntext");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}